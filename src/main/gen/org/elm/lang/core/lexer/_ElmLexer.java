/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.elm.lang.core.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import static org.elm.lang.core.psi.ElmTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ElmLexer.flex</tt>
 */
public class _ElmLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int GLSL_CODE = 4;
  public static final int STRING = 6;
  public static final int RAW_STRING = 8;
  public static final int CHAR = 10;
  public static final int TYPE_PENDING = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 16720 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\26\1\60\1\61\5\21"+
    "\2\26\1\62\7\21\1\26\1\63\20\21\1\26\1\64\1\21\1\65\13\26\1\66\1\26\1\67\22"+
    "\21\1\70\5\21\1\71\13\21\1\72\1\73\10\21\1\74\2\21\1\75\1\76\7\21\123\26\1"+
    "\77\7\26\1\100\1\101\12\26\1\102\24\21\1\26\1\103\u0702\21");

  /* The ZZ_CMAP_Y table has 4352 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\1\15\3\0\1\16"+
    "\1\17\1\20\1\17\2\7\1\21\1\22\2\23\1\24\1\23\7\25\2\26\1\27\5\25\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\26\1\43\2\25\1\44\7\25\1\45"+
    "\1\46\1\47\1\25\10\23\1\50\4\23\1\51\1\52\1\53\1\54\1\0\1\55\1\56\12\0\1\57"+
    "\5\0\1\60\1\61\1\62\1\63\1\64\1\7\1\65\1\66\3\23\1\67\1\70\3\25\1\71\1\72"+
    "\6\7\6\23\4\25\1\73\1\74\6\25\1\75\1\76\14\25\1\77\3\7\1\21\1\100\1\101\4"+
    "\23\11\0\3\53\2\102\5\0\5\53\1\102\2\0\1\103\1\104\1\105\13\53\1\106\1\0\1"+
    "\107\1\110\1\103\1\111\2\0\1\112\3\53\3\0\1\113\12\53\1\114\1\0\1\100\1\0"+
    "\1\103\1\115\3\53\1\102\1\116\1\117\2\53\1\114\1\117\1\120\1\121\2\0\3\53"+
    "\1\121\10\0\2\53\1\122\1\114\10\0\1\123\6\53\1\124\2\0\1\121\1\53\1\125\1"+
    "\103\1\105\1\53\1\126\1\127\1\130\2\53\1\112\1\131\1\124\1\0\1\132\1\0\1\133"+
    "\1\125\1\103\1\54\1\0\1\113\1\134\1\130\2\53\1\112\1\135\1\54\3\0\1\136\1"+
    "\137\1\103\1\140\1\0\1\113\1\141\1\142\2\53\1\112\1\143\1\124\2\0\1\121\1"+
    "\0\1\125\1\103\1\0\1\100\1\113\1\127\1\130\2\53\1\112\1\143\1\124\3\0\1\133"+
    "\1\125\1\103\1\100\1\0\1\144\1\145\1\146\1\147\1\150\1\145\1\53\1\54\2\0\1"+
    "\121\1\0\1\137\1\103\2\0\1\113\1\122\1\112\2\53\1\112\1\53\1\124\3\0\1\102"+
    "\1\125\1\103\2\0\1\126\1\122\1\112\2\53\1\112\1\151\1\124\3\0\1\132\1\125"+
    "\1\103\1\152\1\0\1\113\1\122\1\112\4\53\1\153\1\0\1\132\1\154\1\155\1\125"+
    "\1\103\1\0\1\156\1\113\1\53\1\157\1\156\2\53\1\142\1\106\1\157\3\0\1\137\1"+
    "\103\2\0\1\105\5\53\1\160\1\0\1\157\1\0\1\103\1\161\4\0\1\162\1\163\1\123"+
    "\1\105\1\164\1\165\1\160\1\166\1\167\1\0\1\103\1\170\4\0\1\121\3\0\1\103\1"+
    "\161\2\0\1\53\1\105\3\53\1\171\3\0\1\171\16\0\5\53\1\102\1\0\1\155\1\103\1"+
    "\161\1\114\1\172\1\173\1\110\1\126\1\53\1\54\1\132\1\103\1\161\4\7\1\174\1"+
    "\175\5\53\1\176\51\53\1\146\1\157\1\146\5\53\1\146\4\53\1\146\1\157\1\146"+
    "\1\53\1\157\7\53\1\146\10\53\1\102\4\0\2\53\2\0\12\7\1\177\1\200\1\105\114"+
    "\53\1\127\2\53\1\105\2\53\1\102\11\53\1\102\1\105\1\121\1\53\1\122\1\54\1"+
    "\0\2\53\1\54\1\0\2\53\1\54\1\0\1\53\1\122\1\121\1\0\6\53\1\201\3\0\1\155\1"+
    "\120\1\103\1\161\4\0\1\103\1\161\13\53\1\0\1\127\4\53\1\202\10\53\1\114\1"+
    "\0\3\53\1\157\4\0\1\137\1\103\3\53\1\114\1\171\1\0\5\53\1\201\3\53\1\54\1"+
    "\103\1\161\4\0\2\53\1\157\1\0\6\53\1\171\5\0\1\103\1\161\1\103\1\161\1\155"+
    "\13\0\1\113\5\53\1\201\1\0\1\113\1\201\1\103\1\161\4\0\1\203\3\53\1\121\1"+
    "\110\1\103\1\115\4\53\1\114\3\0\4\53\1\201\3\0\1\103\1\204\1\103\1\115\3\53"+
    "\1\114\1\23\1\205\13\0\1\206\1\207\1\0\30\23\10\0\22\25\1\210\1\211\14\25"+
    "\1\23\1\7\1\200\1\177\1\23\1\7\1\23\1\7\1\200\1\177\1\23\1\212\1\23\1\7\1"+
    "\23\1\200\1\23\1\53\1\23\1\53\1\23\1\53\1\213\1\214\1\215\1\216\1\217\1\220"+
    "\1\23\1\221\1\215\1\216\5\0\1\222\10\0\1\223\1\224\2\0\1\23\1\55\1\0\1\225"+
    "\12\0\1\226\1\227\1\230\1\231\1\232\1\233\1\234\1\235\1\236\1\237\2\0\2\240"+
    "\2\241\1\242\145\0\1\243\3\240\3\241\1\244\42\0\5\7\1\21\5\23\1\24\1\245\1"+
    "\246\1\247\1\250\14\25\1\251\1\252\1\253\1\0\4\23\1\254\1\20\7\53\1\155\2"+
    "\0\2\53\1\157\1\0\10\157\11\0\1\155\72\0\1\107\5\0\1\255\1\150\1\105\11\53"+
    "\1\157\1\113\1\105\12\53\1\176\1\113\4\53\1\114\1\105\12\53\1\157\2\0\3\53"+
    "\1\102\6\0\170\53\1\114\11\0\72\53\1\114\5\0\21\53\1\171\10\0\5\53\1\114\41"+
    "\53\1\171\2\53\1\103\1\256\2\0\5\25\1\257\1\0\1\155\3\25\1\260\10\53\1\114"+
    "\5\0\1\155\1\53\1\74\1\25\1\27\7\25\1\23\1\261\1\25\1\262\1\263\2\25\1\264"+
    "\1\265\7\0\1\155\1\266\1\267\1\176\2\53\1\102\3\0\6\53\1\201\1\0\1\156\5\53"+
    "\1\201\3\0\1\103\1\161\2\0\1\156\1\270\1\103\1\115\2\53\1\114\1\0\2\53\1\157"+
    "\3\0\3\53\1\171\1\123\5\53\1\102\2\0\1\155\1\103\1\161\1\122\1\53\1\103\1"+
    "\271\5\53\1\121\2\0\1\176\1\201\1\103\1\161\2\53\1\157\1\272\6\53\1\173\1"+
    "\255\1\202\2\0\1\273\1\53\1\102\1\140\1\0\3\274\1\0\2\157\5\23\1\275\1\200"+
    "\1\0\12\23\4\53\1\102\1\0\1\103\1\161\64\53\1\201\1\0\2\53\1\157\1\203\5\53"+
    "\1\201\40\0\55\53\1\114\15\53\1\54\4\0\1\24\1\0\1\276\1\277\1\53\1\112\1\157"+
    "\1\167\1\300\15\53\1\54\3\0\1\203\54\53\1\114\2\0\10\53\1\156\6\53\5\0\1\53"+
    "\1\201\16\0\1\122\20\53\1\171\2\0\1\103\1\161\1\77\2\7\1\301\1\101\2\23\1"+
    "\302\1\110\12\53\1\157\3\156\1\140\4\0\1\53\1\151\2\53\1\157\2\53\1\303\1"+
    "\53\1\114\1\53\1\114\4\0\17\53\1\102\60\0\3\53\1\171\6\53\1\121\5\0\4\53\2"+
    "\0\2\53\1\112\1\54\4\53\1\114\1\0\3\53\1\114\4\53\1\201\1\53\6\0\5\7\5\23"+
    "\11\53\1\114\1\103\1\161\4\7\1\220\4\23\1\304\5\53\1\0\6\53\1\201\23\0\46"+
    "\53\1\157\1\0\2\53\1\114\1\0\1\53\23\0\1\114\1\112\4\53\1\141\1\305\2\53\1"+
    "\114\1\0\2\53\1\157\1\0\3\53\1\157\10\0\2\53\1\306\1\0\2\53\1\114\1\0\3\53"+
    "\1\54\10\0\7\53\1\110\10\0\1\121\1\0\1\151\1\105\2\53\1\201\5\0\3\53\1\171"+
    "\3\53\1\171\4\0\1\53\1\105\2\53\1\171\3\0\6\53\1\114\1\0\2\53\1\114\1\0\2"+
    "\53\1\102\1\0\2\53\1\54\15\0\11\53\1\121\6\0\6\7\1\301\1\0\6\23\1\302\41\0"+
    "\1\203\6\53\5\0\1\137\1\103\2\0\1\203\5\53\4\0\3\53\1\121\1\103\1\161\1\203"+
    "\3\53\1\157\1\0\1\137\1\103\2\0\4\53\1\307\1\0\1\203\5\53\1\102\1\0\1\310"+
    "\1\0\1\103\1\311\4\0\2\53\1\142\2\53\1\201\12\0\1\157\1\312\1\53\1\141\1\53"+
    "\1\121\5\53\1\157\2\0\1\103\1\161\1\113\1\127\1\130\2\53\1\112\1\143\1\124"+
    "\2\0\1\121\1\113\1\54\23\0\6\53\1\171\1\0\1\155\1\102\1\103\1\161\4\0\6\53"+
    "\2\0\1\133\1\0\1\103\1\161\24\0\5\53\1\157\5\0\1\201\4\0\6\53\2\0\1\120\1"+
    "\0\1\103\1\161\4\0\5\53\1\102\2\0\1\103\1\161\6\0\3\53\1\54\2\0\1\103\1\161"+
    "\54\0\4\7\4\23\1\103\1\161\1\0\1\155\70\0\7\53\1\121\40\0\1\53\1\112\3\53"+
    "\1\157\2\0\1\121\1\0\1\103\1\161\2\0\1\156\3\53\56\0\63\53\1\54\34\0\30\53"+
    "\1\201\27\0\5\53\1\157\72\0\10\53\1\157\67\0\7\53\1\121\3\53\1\157\1\103\1"+
    "\161\14\0\3\53\1\114\2\0\6\53\2\0\1\201\1\0\1\103\1\161\1\203\2\53\1\113\2"+
    "\53\56\0\10\53\1\171\1\0\1\121\7\0\1\203\1\53\10\0\1\121\3\0\75\53\1\171\2"+
    "\0\36\53\1\102\41\0\1\54\77\0\15\53\1\102\1\53\1\171\1\53\1\121\1\53\1\54"+
    "\54\0\3\7\1\313\2\23\1\314\2\7\1\315\1\213\2\23\3\7\1\313\2\23\1\316\1\317"+
    "\1\320\1\315\1\321\1\322\1\23\3\7\1\313\2\23\1\323\1\324\1\325\1\326\3\23"+
    "\1\327\1\330\1\331\1\332\2\23\1\314\2\7\1\315\3\23\3\7\1\313\2\23\1\314\2"+
    "\7\1\315\3\23\3\7\1\313\2\23\1\314\2\7\1\315\3\23\3\7\1\313\2\23\1\200\3\7"+
    "\1\332\2\23\1\275\1\333\2\7\1\334\2\23\1\213\1\314\2\7\1\326\2\23\1\24\1\250"+
    "\2\7\1\21\3\23\1\335\3\7\1\332\2\23\1\275\1\336\6\103\30\53\1\171\7\0\4\7"+
    "\1\313\3\23\1\304\1\0\1\103\1\161\24\0\1\151\3\53\1\162\1\105\1\176\1\337"+
    "\1\340\1\341\1\162\1\342\1\162\2\176\1\136\1\53\1\142\1\53\1\201\1\343\1\142"+
    "\1\53\1\201\116\0\3\240\1\344\3\240\1\344\3\240\1\344\16\0\32\53\1\157\5\0"+
    "\106\53\1\171\1\0\33\53\1\114\120\53\1\54\53\0\3\53\1\114\74\0");

  /* The ZZ_CMAP_A table has 1832 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\1\2\64\1\2\2\0\1\3\1\22\1\35\4\22\1\33\1\57\1\60\2\22\1\62\1\5"+
    "\1\16\1\22\1\20\11\7\1\26\1\0\1\22\1\24\1\25\2\22\6\15\14\14\1\61\1\27\1\36"+
    "\1\22\1\63\1\0\1\37\1\12\1\55\1\45\1\17\1\54\1\53\1\47\1\41\2\11\1\40\1\43"+
    "\1\34\1\44\1\51\1\11\1\50\1\42\1\52\1\30\1\11\1\46\1\21\1\56\1\11\1\31\1\23"+
    "\1\32\1\22\6\0\1\64\4\0\4\22\4\0\1\11\12\0\1\11\2\0\7\14\1\0\7\14\20\11\1"+
    "\0\1\14\1\11\1\14\1\11\1\14\1\11\1\14\2\11\1\14\1\11\1\14\1\11\1\14\1\11\1"+
    "\14\2\11\1\14\1\11\1\14\1\11\1\14\1\11\2\14\1\11\1\14\1\11\1\14\3\11\2\14"+
    "\1\11\1\14\1\11\2\14\1\11\3\14\2\11\4\14\1\11\2\14\1\11\3\14\3\11\2\14\1\11"+
    "\2\14\1\11\1\14\1\11\1\14\1\11\2\14\1\11\1\14\2\11\1\14\1\11\2\14\1\11\3\14"+
    "\1\11\1\14\1\11\2\14\2\11\1\6\1\14\3\11\4\6\1\14\1\6\1\11\1\14\1\6\1\11\1"+
    "\14\1\6\1\11\1\14\1\11\1\14\1\11\1\14\1\11\1\14\2\11\1\14\2\11\1\14\1\6\1"+
    "\11\1\14\1\11\3\14\1\11\1\14\7\11\2\14\1\11\2\14\2\11\1\14\1\11\4\14\5\11"+
    "\1\6\4\11\7\6\2\11\4\0\14\6\6\0\5\11\7\0\1\6\1\0\1\6\6\0\1\10\2\0\1\14\1\11"+
    "\1\14\1\11\1\6\1\0\1\14\1\11\2\0\4\11\1\0\1\14\6\0\1\14\1\0\3\14\1\0\1\14"+
    "\1\0\2\14\1\11\11\14\1\0\11\14\13\11\1\14\2\11\3\14\7\11\1\14\1\11\1\0\1\14"+
    "\1\11\2\14\2\11\4\14\1\11\10\0\1\14\1\11\1\14\1\11\1\14\1\11\2\14\1\11\1\14"+
    "\1\11\1\14\1\11\1\14\1\11\1\14\1\11\1\14\1\11\1\14\2\11\1\0\7\14\1\0\1\6\7"+
    "\0\7\11\3\6\5\0\12\7\4\0\2\6\1\0\13\6\1\0\1\6\7\0\2\6\7\0\2\6\2\7\3\6\2\0"+
    "\2\6\1\0\6\6\5\0\11\6\2\0\2\7\6\6\4\0\2\6\4\0\1\6\11\0\1\6\3\0\1\6\7\0\5\6"+
    "\1\0\2\6\4\0\6\6\3\0\1\6\2\0\2\6\4\0\2\7\1\6\4\0\10\6\2\0\2\6\2\0\6\6\1\0"+
    "\1\6\3\0\2\6\6\0\1\6\5\0\2\6\1\0\4\6\4\0\2\6\1\0\2\6\1\0\2\6\2\0\4\6\1\0\1"+
    "\6\7\0\2\7\2\0\3\6\3\0\6\6\1\0\3\6\1\0\6\6\1\0\2\6\1\0\3\6\3\0\1\6\1\0\6\6"+
    "\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\4\6\1\0\3\6\1\0\2\6\5"+
    "\0\3\6\2\0\1\6\6\0\3\6\10\0\1\6\2\0\15\6\1\0\1\6\1\0\2\6\4\0\2\7\7\0\2\6\1"+
    "\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\3\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6\5\0"+
    "\1\6\2\0\5\6\1\0\1\6\1\0\2\7\2\0\11\6\5\0\4\6\3\0\1\6\3\0\2\6\1\0\6\14\1\0"+
    "\1\14\5\0\1\14\2\0\3\6\1\0\4\6\6\14\2\0\6\11\2\0\4\6\4\0\1\6\1\0\1\6\10\0"+
    "\5\6\2\7\3\0\3\6\1\11\10\0\4\6\1\0\4\6\3\0\2\6\1\0\1\14\1\11\1\14\1\11\1\14"+
    "\11\11\1\14\1\11\1\0\1\14\1\0\1\14\1\0\1\14\1\0\1\14\5\11\1\0\2\11\4\14\1"+
    "\6\1\0\1\11\3\0\3\11\1\0\2\11\4\14\1\6\3\0\4\11\2\0\2\11\4\14\4\0\5\14\3\0"+
    "\2\64\7\0\1\11\15\0\1\11\4\0\1\22\5\0\1\14\4\0\1\14\2\0\1\11\3\14\2\11\3\14"+
    "\1\11\1\0\1\14\3\0\5\14\6\0\1\14\1\0\1\14\1\0\1\14\1\0\4\14\1\0\1\11\4\14"+
    "\1\11\4\6\1\11\2\0\2\11\2\14\5\0\1\14\4\11\4\0\1\11\1\0\10\13\10\10\3\0\1"+
    "\14\1\11\11\0\2\13\2\10\6\0\1\14\1\11\3\14\2\11\1\14\1\11\1\14\1\11\1\14\1"+
    "\11\4\14\1\11\1\14\2\11\1\14\10\11\3\14\1\11\1\14\2\11\6\0\1\14\1\11\1\14"+
    "\1\11\3\0\1\14\1\11\4\0\6\11\1\0\1\11\1\0\5\6\2\0\2\7\2\6\4\0\1\14\1\11\1"+
    "\14\1\11\1\14\1\11\1\6\1\0\1\14\1\11\1\14\3\11\2\0\1\11\1\14\1\11\1\14\1\11"+
    "\2\14\1\11\1\6\2\0\1\14\1\11\1\14\1\11\1\6\1\14\1\11\1\14\3\11\1\14\1\11\1"+
    "\14\1\11\5\14\1\0\5\14\1\11\1\14\4\11\7\6\1\0\3\6\1\0\1\6\3\0\1\6\1\0\1\6"+
    "\2\0\2\7\5\6\3\0\1\6\3\0\2\6\3\0\3\6\3\0\6\6\1\0\3\11\1\0\4\11\3\0\5\11\5"+
    "\0\1\6\1\0\3\6\1\0\2\6\1\0\2\6\3\14\5\0\3\11\5\0\3\6\1\0\2\6\1\0\1\6\4\11"+
    "\4\0\1\6\3\0\1\6\2\0\4\6\1\0\2\6\2\0\3\6\3\0\1\6\2\0\4\6\3\0\2\7\1\6\1\0\1"+
    "\6\3\0\1\6\1\0\4\6\1\0\1\6\2\14\12\11\12\14\6\11\1\14\1\0\2\14\2\0\1\14\2"+
    "\0\2\14\2\0\4\14\1\0\2\14\2\11\1\0\1\11\1\0\7\11\1\0\7\11\2\14\1\0\4\14\2"+
    "\0\10\14\1\0\7\14\1\0\2\11\2\14\1\0\4\14\1\0\5\14\1\0\1\14\3\0\7\14\1\0\10"+
    "\11\11\14\1\0\5\11\1\0\10\11\1\14\1\11\2\0\2\7\1\0\1\6\1\0\1\6\6\0\1\6\4\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\3"+
    "\6\2\13\6\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\7\1\6\1\5\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\11\7\1\23"+
    "\1\24\1\25\1\26\1\27\3\30\2\31\1\32\1\33"+
    "\1\0\1\34\2\32\1\35\1\36\2\37\1\40\1\41"+
    "\2\0\1\42\2\7\1\0\1\43\1\0\1\44\1\7"+
    "\1\45\1\7\1\46\1\7\1\47\5\7\1\0\1\50"+
    "\1\51\1\31\1\52\1\53\1\54\1\53\1\32\1\0"+
    "\1\6\1\0\1\6\2\7\1\6\1\55\1\56\1\57"+
    "\10\7\2\0\1\60\1\0\1\7\1\61\4\7\1\62"+
    "\1\63\1\64\1\65\4\0\1\7\1\66\2\7\1\67"+
    "\2\0\1\70\1\7\1\71\1\72\1\73\1\0\1\7"+
    "\1\0\1\74\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0173\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u0385\0\u0385\0\u0385\0\u0173"+
    "\0\u03ba\0\u0173\0\u0173\0\u03ef\0\u0173\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0173\0\u0173"+
    "\0\u0601\0\u0173\0\u0173\0\u0173\0\u0636\0\u066b\0\u06a0\0\u06d5"+
    "\0\u070a\0\u0173\0\u073f\0\u0173\0\u0774\0\u07a9\0\u0173\0\u0173"+
    "\0\u0173\0\u07de\0\u0813\0\u0385\0\u0848\0\u087d\0\u0385\0\u08b2"+
    "\0\u08e7\0\u091c\0\u0951\0\u0986\0\u027c\0\u09bb\0\u09f0\0\u0a25"+
    "\0\u027c\0\u0a5a\0\u027c\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0173\0\u0173\0\u0bcd\0\u0173\0\u0173\0\u0173\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0cd6\0\u0d0b\0\u0d40\0\u091c"+
    "\0\u0173\0\u0173\0\u027c\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0c37\0\u0f87\0\u0fbc"+
    "\0\u027c\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u027c\0\u027c\0\u027c"+
    "\0\u027c\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u027c\0\u11ce"+
    "\0\u1203\0\u027c\0\u1238\0\u126d\0\u0173\0\u12a2\0\u027c\0\u027c"+
    "\0\u0173\0\u12d7\0\u130c\0\u1341\0\u027c\0\u1376\0\u13ab";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\10\1\16"+
    "\3\17\3\20\1\21\1\22\1\23\1\17\1\24\1\25"+
    "\1\26\1\24\1\27\1\30\1\17\1\31\1\32\1\33"+
    "\1\17\1\34\1\35\1\36\1\37\1\40\1\17\1\41"+
    "\1\42\1\17\1\43\2\17\1\44\1\45\2\17\1\46"+
    "\1\17\1\47\1\50\1\51\1\52\1\53\1\0\5\54"+
    "\1\55\23\54\1\56\33\54\23\57\1\60\41\57\1\61"+
    "\1\62\25\61\1\63\5\61\1\64\27\61\27\65\1\63"+
    "\5\65\1\66\27\65\1\67\1\62\25\67\1\63\3\67"+
    "\1\70\31\67\3\71\1\13\33\71\1\72\25\71\66\0"+
    "\1\11\66\0\1\13\66\0\1\73\1\0\1\16\6\0"+
    "\1\24\1\0\1\16\1\0\3\24\1\74\1\24\45\0"+
    "\1\16\6\0\1\75\1\76\1\16\52\0\2\17\1\0"+
    "\2\17\1\0\2\17\1\0\3\17\6\0\1\17\3\0"+
    "\1\17\2\0\20\17\4\0\1\17\7\0\2\20\1\0"+
    "\2\20\1\0\2\20\1\0\3\20\6\0\1\20\3\0"+
    "\1\20\2\0\20\20\4\0\1\20\6\0\1\24\10\0"+
    "\1\77\3\0\5\24\44\0\2\17\1\0\2\17\1\0"+
    "\2\17\1\0\2\17\1\100\6\0\1\17\3\0\1\17"+
    "\2\0\1\17\1\101\16\17\4\0\1\17\10\0\1\16"+
    "\6\0\1\75\1\76\1\16\1\102\50\0\1\24\10\0"+
    "\1\24\3\0\5\24\43\0\1\103\114\0\1\104\35\0"+
    "\2\17\1\0\2\17\1\0\2\17\1\0\3\17\6\0"+
    "\1\17\3\0\1\17\2\0\3\17\1\105\14\17\4\0"+
    "\1\17\7\0\2\17\1\0\2\17\1\0\2\17\1\0"+
    "\1\106\2\17\6\0\1\17\3\0\1\17\2\0\20\17"+
    "\4\0\1\17\7\0\2\17\1\0\2\17\1\0\2\17"+
    "\1\0\3\17\6\0\1\17\3\0\1\107\2\0\4\17"+
    "\1\110\10\17\1\111\2\17\4\0\1\17\7\0\2\17"+
    "\1\0\2\17\1\0\2\17\1\0\3\17\6\0\1\17"+
    "\3\0\1\17\2\0\5\17\1\112\12\17\4\0\1\17"+
    "\7\0\2\17\1\0\2\17\1\0\2\17\1\0\3\17"+
    "\6\0\1\17\3\0\1\17\2\0\15\17\1\113\2\17"+
    "\4\0\1\17\7\0\2\17\1\0\2\17\1\0\2\17"+
    "\1\0\3\17\6\0\1\17\3\0\1\17\2\0\10\17"+
    "\1\114\7\17\4\0\1\17\7\0\2\17\1\0\2\17"+
    "\1\0\2\17\1\0\3\17\6\0\1\17\3\0\1\17"+
    "\2\0\5\17\1\115\12\17\4\0\1\17\7\0\2\17"+
    "\1\0\2\17\1\0\2\17\1\0\3\17\6\0\1\17"+
    "\3\0\1\17\2\0\10\17\1\116\6\17\1\117\4\0"+
    "\1\17\7\0\2\17\1\0\2\17\1\0\2\17\1\0"+
    "\3\17\6\0\1\17\3\0\1\17\2\0\1\120\17\17"+
    "\4\0\1\17\54\0\1\121\43\0\1\122\37\0\1\123"+
    "\57\0\23\57\1\0\41\57\23\0\1\124\12\0\1\125"+
    "\26\0\1\61\1\0\25\61\1\0\5\61\1\0\27\61"+
    "\27\126\1\127\1\130\2\126\3\127\12\126\1\127\1\126"+
    "\1\127\12\126\27\65\1\0\5\65\1\0\27\65\35\0"+
    "\1\131\67\0\1\132\24\0\1\73\2\0\62\73\7\0"+
    "\1\133\10\0\1\133\51\0\1\134\1\0\1\135\10\0"+
    "\1\135\52\0\2\17\1\0\2\17\1\0\2\17\1\0"+
    "\3\17\6\0\1\17\3\0\1\17\2\0\12\17\1\136"+
    "\5\17\4\0\1\17\7\0\2\17\1\0\2\17\1\0"+
    "\2\17\1\0\3\17\6\0\1\17\3\0\1\17\2\0"+
    "\3\17\1\137\14\17\4\0\1\17\10\0\1\140\2\0"+
    "\1\140\2\0\1\140\1\0\2\140\16\0\1\140\5\0"+
    "\1\140\6\0\2\140\32\0\1\141\76\0\1\142\35\0"+
    "\2\17\1\0\2\17\1\0\2\17\1\0\3\17\6\0"+
    "\1\17\3\0\1\17\2\0\13\17\1\143\4\17\4\0"+
    "\1\17\7\0\2\17\1\0\2\17\1\0\2\17\1\0"+
    "\3\17\6\0\1\17\3\0\1\17\2\0\15\17\1\144"+
    "\2\17\4\0\1\17\7\0\2\17\1\0\2\17\1\0"+
    "\2\17\1\0\3\17\6\0\1\17\3\0\1\17\2\0"+
    "\12\17\1\145\5\17\4\0\1\17\7\0\2\17\1\0"+
    "\2\17\1\0\2\17\1\0\3\17\6\0\1\17\3\0"+
    "\1\17\2\0\6\17\1\146\11\17\4\0\1\17\7\0"+
    "\2\17\1\0\2\17\1\0\2\17\1\0\1\147\2\17"+
    "\6\0\1\17\3\0\1\17\2\0\20\17\4\0\1\17"+
    "\7\0\2\17\1\0\2\17\1\0\2\17\1\0\3\17"+
    "\6\0\1\17\3\0\1\17\2\0\11\17\1\150\6\17"+
    "\4\0\1\17\7\0\2\17\1\0\2\17\1\0\2\17"+
    "\1\0\1\151\2\17\6\0\1\17\3\0\1\17\2\0"+
    "\20\17\4\0\1\17\7\0\2\17\1\0\2\17\1\0"+
    "\2\17\1\0\3\17\6\0\1\17\3\0\1\17\2\0"+
    "\12\17\1\152\5\17\4\0\1\17\7\0\2\17\1\0"+
    "\2\17\1\0\2\17\1\0\3\17\6\0\1\17\3\0"+
    "\1\17\2\0\3\17\1\153\14\17\4\0\1\17\41\0"+
    "\1\154\47\0\1\124\72\0\1\155\70\0\1\156\70\0"+
    "\1\157\32\0\1\133\7\0\1\76\1\133\53\0\1\135"+
    "\10\0\1\135\52\0\2\17\1\0\2\17\1\0\2\17"+
    "\1\0\3\17\6\0\1\17\3\0\1\17\2\0\5\17"+
    "\1\160\12\17\4\0\1\17\7\0\2\17\1\0\2\17"+
    "\1\0\2\17\1\0\1\161\2\17\6\0\1\17\3\0"+
    "\1\17\2\0\20\17\4\0\1\17\7\0\2\17\1\0"+
    "\2\17\1\0\2\17\1\0\3\17\6\0\1\17\3\0"+
    "\1\17\2\0\2\17\1\162\15\17\4\0\1\17\7\0"+
    "\2\17\1\0\2\17\1\0\2\17\1\0\3\17\6\0"+
    "\1\17\3\0\1\17\2\0\5\17\1\163\12\17\4\0"+
    "\1\17\7\0\2\17\1\0\2\17\1\0\2\17\1\0"+
    "\3\17\6\0\1\164\3\0\1\17\2\0\20\17\4\0"+
    "\1\17\7\0\2\17\1\0\2\17\1\0\2\17\1\0"+
    "\3\17\6\0\1\17\3\0\1\17\2\0\11\17\1\165"+
    "\6\17\4\0\1\17\7\0\2\17\1\0\2\17\1\0"+
    "\2\17\1\0\3\17\6\0\1\17\3\0\1\17\2\0"+
    "\13\17\1\166\4\17\4\0\1\17\7\0\2\17\1\0"+
    "\2\17\1\0\2\17\1\0\3\17\6\0\1\17\3\0"+
    "\1\167\2\0\20\17\4\0\1\17\7\0\2\17\1\0"+
    "\2\17\1\0\2\17\1\0\1\170\2\17\6\0\1\17"+
    "\3\0\1\17\2\0\20\17\4\0\1\17\7\0\2\17"+
    "\1\0\2\17\1\0\2\17\1\0\1\171\2\17\6\0"+
    "\1\17\3\0\1\17\2\0\20\17\4\0\1\17\43\0"+
    "\1\172\22\0\7\173\1\174\2\173\1\174\2\173\1\174"+
    "\1\173\2\174\11\173\1\126\4\173\1\174\5\173\1\174"+
    "\6\173\2\174\7\173\37\0\1\175\33\0\2\17\1\0"+
    "\2\17\1\0\2\17\1\0\3\17\6\0\1\17\3\0"+
    "\1\17\2\0\3\17\1\176\14\17\4\0\1\17\7\0"+
    "\2\17\1\0\2\17\1\0\2\17\1\0\2\17\1\177"+
    "\6\0\1\17\3\0\1\17\2\0\20\17\4\0\1\17"+
    "\7\0\2\17\1\0\2\17\1\0\2\17\1\0\3\17"+
    "\6\0\1\17\3\0\1\17\2\0\11\17\1\200\6\17"+
    "\4\0\1\17\7\0\2\17\1\0\2\17\1\0\2\17"+
    "\1\0\3\17\6\0\1\17\3\0\1\17\2\0\1\17"+
    "\1\201\16\17\4\0\1\17\7\0\2\17\1\0\2\17"+
    "\1\0\2\17\1\0\1\202\2\17\6\0\1\17\3\0"+
    "\1\17\2\0\20\17\4\0\1\17\41\0\1\203\24\0"+
    "\32\173\1\126\41\173\1\204\2\173\1\204\2\173\1\204"+
    "\1\173\2\204\11\173\1\126\4\173\1\204\5\173\1\204"+
    "\6\173\2\204\7\173\42\0\1\205\30\0\2\17\1\0"+
    "\2\17\1\0\2\17\1\0\3\17\6\0\1\17\3\0"+
    "\1\17\2\0\2\17\1\206\15\17\4\0\1\17\7\0"+
    "\2\17\1\0\2\17\1\0\2\17\1\0\3\17\6\0"+
    "\1\17\3\0\1\17\2\0\13\17\1\207\4\17\4\0"+
    "\1\17\7\0\2\17\1\0\2\17\1\0\2\17\1\0"+
    "\1\210\2\17\6\0\1\17\3\0\1\17\2\0\20\17"+
    "\4\0\1\17\24\0\1\211\41\0\7\173\1\212\2\173"+
    "\1\212\2\173\1\212\1\173\2\212\11\173\1\126\4\173"+
    "\1\212\5\173\1\212\6\173\2\212\7\173\6\0\2\17"+
    "\1\0\2\17\1\0\2\17\1\0\3\17\6\0\1\17"+
    "\3\0\1\213\2\0\20\17\4\0\1\17\1\0\7\173"+
    "\1\214\2\173\1\214\2\173\1\214\1\173\2\214\11\173"+
    "\1\126\4\173\1\214\5\173\1\214\6\173\2\214\7\173"+
    "\6\0\2\17\1\0\2\17\1\0\2\17\1\0\3\17"+
    "\6\0\1\17\3\0\1\17\2\0\14\17\1\215\3\17"+
    "\4\0\1\17\1\0\7\173\1\216\2\173\1\216\2\173"+
    "\1\216\1\173\2\216\11\173\1\127\4\173\1\216\5\173"+
    "\1\216\6\173\2\216\16\173\1\217\2\173\1\217\2\173"+
    "\1\217\1\173\2\217\11\173\1\127\4\173\1\217\5\173"+
    "\1\217\6\173\2\217\41\173\1\127\32\173";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5088];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\2\1\1\11\13\1\1\11\1\1\2\11"+
    "\1\1\1\11\11\1\2\11\1\1\3\11\5\1\1\11"+
    "\1\0\1\11\2\1\3\11\3\1\2\0\3\1\1\0"+
    "\1\1\1\0\14\1\1\0\2\11\1\1\3\11\2\1"+
    "\1\0\1\1\1\0\4\1\2\11\11\1\2\0\1\1"+
    "\1\0\12\1\4\0\5\1\2\0\1\11\3\1\1\11"+
    "\1\0\1\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _ElmLexer() {
    this(null);
  }
    private int commentLevel = 0;
    private int charLength = 0;
    private boolean docComment = false;

    private void startComment() {
        commentLevel = 1;
        yybegin(COMMENT);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _ElmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case COMMENT: {
              commentLevel = 0; yybegin(YYINITIAL); return docComment ? DOC_COMMENT : BLOCK_COMMENT;
            }  // fall though
            case 144: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 61: break;
          case 2: 
            { return NEWLINE;
            } 
            // fall through
          case 62: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 4: 
            { return TAB;
            } 
            // fall through
          case 64: break;
          case 5: 
            { return OPERATOR_IDENTIFIER;
            } 
            // fall through
          case 65: break;
          case 6: 
            { return NUMBER_LITERAL;
            } 
            // fall through
          case 66: break;
          case 7: 
            { return LOWER_CASE_IDENTIFIER;
            } 
            // fall through
          case 67: break;
          case 8: 
            { return UPPER_CASE_IDENTIFIER;
            } 
            // fall through
          case 68: break;
          case 9: 
            { return DOT;
            } 
            // fall through
          case 69: break;
          case 10: 
            { return PIPE;
            } 
            // fall through
          case 70: break;
          case 11: 
            { return EQ;
            } 
            // fall through
          case 71: break;
          case 12: 
            { return COLON;
            } 
            // fall through
          case 72: break;
          case 13: 
            { return BACKSLASH;
            } 
            // fall through
          case 73: break;
          case 14: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 74: break;
          case 15: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 75: break;
          case 16: 
            { yybegin(CHAR); charLength = 0; return OPEN_CHAR;
            } 
            // fall through
          case 76: break;
          case 17: 
            { yybegin(STRING); return OPEN_QUOTE;
            } 
            // fall through
          case 77: break;
          case 18: 
            { return RIGHT_SQUARE_BRACKET;
            } 
            // fall through
          case 78: break;
          case 19: 
            { return LEFT_PARENTHESIS;
            } 
            // fall through
          case 79: break;
          case 20: 
            { return RIGHT_PARENTHESIS;
            } 
            // fall through
          case 80: break;
          case 21: 
            { return LEFT_SQUARE_BRACKET;
            } 
            // fall through
          case 81: break;
          case 22: 
            { return COMMA;
            } 
            // fall through
          case 82: break;
          case 23: 
            { return UNDERSCORE;
            } 
            // fall through
          case 83: break;
          case 24: 
            { 
            } 
            // fall through
          case 84: break;
          case 25: 
            { return GLSL_CODE_CONTENT;
            } 
            // fall through
          case 85: break;
          case 26: 
            { return REGULAR_STRING_PART;
            } 
            // fall through
          case 86: break;
          case 27: 
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 87: break;
          case 28: 
            { yybegin(YYINITIAL); return CLOSE_QUOTE;
            } 
            // fall through
          case 88: break;
          case 29: 
            { if (charLength++ == 0) return REGULAR_STRING_PART;
          // Rather than returing a bad character, push the text back onto the stack so that other rules can
          // parse normally.
          yypushback(1); yybegin(YYINITIAL); charLength = 0;
            } 
            // fall through
          case 89: break;
          case 30: 
            { yybegin(YYINITIAL); charLength = 0; return CLOSE_CHAR;
            } 
            // fall through
          case 90: break;
          case 31: 
            { yypushback(1);
          yybegin(YYINITIAL);
            } 
            // fall through
          case 91: break;
          case 32: 
            { return LINE_COMMENT;
            } 
            // fall through
          case 92: break;
          case 33: 
            { return ARROW;
            } 
            // fall through
          case 93: break;
          case 34: 
            { return DOUBLE_DOT;
            } 
            // fall through
          case 94: break;
          case 35: 
            { docComment = false;
        startComment();
            } 
            // fall through
          case 95: break;
          case 36: 
            { return AS;
            } 
            // fall through
          case 96: break;
          case 37: 
            { return IN;
            } 
            // fall through
          case 97: break;
          case 38: 
            { return IF;
            } 
            // fall through
          case 98: break;
          case 39: 
            { return OF;
            } 
            // fall through
          case 99: break;
          case 40: 
            { if (--commentLevel == 0) {
                yybegin(YYINITIAL);
                return docComment ? DOC_COMMENT : BLOCK_COMMENT;
            }
            } 
            // fall through
          case 100: break;
          case 41: 
            { commentLevel++;
            } 
            // fall through
          case 101: break;
          case 42: 
            { yybegin(YYINITIAL);
        return END_GLSL_CODE;
            } 
            // fall through
          case 102: break;
          case 43: 
            { return INVALID_STRING_ESCAPE;
            } 
            // fall through
          case 103: break;
          case 44: 
            { return STRING_ESCAPE;
            } 
            // fall through
          case 104: break;
          case 45: 
            { docComment = true;
        startComment();
            } 
            // fall through
          case 105: break;
          case 46: 
            { yybegin(RAW_STRING); return OPEN_QUOTE;
            } 
            // fall through
          case 106: break;
          case 47: 
            { return LET;
            } 
            // fall through
          case 107: break;
          case 48: 
            { int length = yytext().length();
        if (length <= 3) { // closing """
            yybegin(YYINITIAL);
            return CLOSE_QUOTE;
        } else { // some quotes at the end of a string, e.g. """ "foo""""
            yypushback(3); // return the closing quotes (""") to the stream
            return REGULAR_STRING_PART;
        }
            } 
            // fall through
          case 108: break;
          case 49: 
            { return ELSE;
            } 
            // fall through
          case 109: break;
          case 50: 
            { return PORT;
            } 
            // fall through
          case 110: break;
          case 51: 
            { return THEN;
            } 
            // fall through
          case 111: break;
          case 52: 
            { yybegin(TYPE_PENDING); return TYPE;
            } 
            // fall through
          case 112: break;
          case 53: 
            { return CASE;
            } 
            // fall through
          case 113: break;
          case 54: 
            { return INFIX;
            } 
            // fall through
          case 114: break;
          case 55: 
            { return WHERE;
            } 
            // fall through
          case 115: break;
          case 56: 
            { yybegin(YYINITIAL);
          return ALIAS;
            } 
            // fall through
          case 116: break;
          case 57: 
            { return IMPORT;
            } 
            // fall through
          case 117: break;
          case 58: 
            { return MODULE;
            } 
            // fall through
          case 118: break;
          case 59: 
            { yybegin(GLSL_CODE);
            return START_GLSL_CODE;
            } 
            // fall through
          case 119: break;
          case 60: 
            { return EXPOSING;
            } 
            // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
